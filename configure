#!/bin/sh
# libMule configure script with some patches that allow you to cross-compile
# a Windows build of libMule SDK from Linux
# This file is a part of libMule - Microcontroller-Universal 
# Library (that is extendable)
# Copyright (C) 2018-2019 Tim K <timprogrammer@rambler.ru>
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License.
#  
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  
# 02110-1301  USA



# some functions
niceheader() {
	echo "===================================================================="
	echo "| libMule - Microcontroller-Universal Library (that is Extendable) |"
	echo "|                       Version $MULEVERSION                       |"
	echo "|    Copyright (c) Tim K <timprogrammer@rambler.ru> 2019. Licensed |"
	echo "|                       under GNU LGPLv2.1.                        |"
	echo "===================================================================="
}

dummyerror() {
	return 1
}

dbgecho() {
	if test "$DEBUG" != ""; then
		echo "[DEBUG] $*"
	fi
	printf "[" >> ./muleconfigure.log
	printf `date +"%d.%m.%Y %H:%M:%S"` >> ./muleconfigure.log
	printf " at $PWD" >> ./muleconfigure.log
	printf "] " >> ./muleconfigure.log
	echo "$*" >> ./muleconfigure.log
}

showhelp() {
	cat <<EOF
Usage: $0 [arguments]

	-prefix=[directory]			set libMule installation prefix.
						The default value for this option
						is $PREFIX.
	
	-modules=[all/minimal/list]		build a stripped-down version of
						libMule with only several modules
						specified. Specify the modules in
						a list seperated by a comma. If you
						want to build a barely working version
						of libMule, you may specify
						-modules=minimal option, which will only
						build the "core" module. Or if you, on
						the other hand, want to build libMule
						with all modules enable, just specify
						this by passing the -modules=all option
						on the command line. The default value
						for this option is always "all".
	
	-platform=[platform name]		set target platform for which you
						are planning to create applications
						using libMule.

	-platformcc=[path to your C cross-	specify the C cross-compiler that
	compiler]				produces code for the target plat-
						form.
						
	-platformcxx=[path to your C++ cross-	specify the C++ cross-compiler that
	compiler]				produces code for the target plat-
						form.
						
	-platformld=[path to your cross-lin-	this option rarely needs to be speci-
	ker]					fied, as, usually, your C++ compiler
						is also used as a linker. However, if
						this is not the case for your C++
						cross-compiler, then specify a seperate
						linker program with this option.
	
	-platformar=[path to the ar utility]	specify the GNU ar utility that can
						produce native static libraries for the
						target platform.
						
	-platformcompilerflags=[flags]		specify this option if you want to call
						your C/C++ cross-compilers with additional
						options.
						
	-platformos=[linux/qnx/bsd/unix/posix/	manually specify the operating system that
	none]					is installed on your device. Use this option
						if you use an unofficial firmware.
						
	-platformthirdpartytools=[yes/no]       download third-party tools that make develop-
						ment for your platform easier, but could not
						be included in standard libMule source distri-
						bution due to license incompatibilities.
						
	-arduino-header=[full path to Arduino.h] Deprecated option.
						 
	-arduino-idedir=[Arduino IDE install    Required only when cross-compiling for Arduino.
	prefix]                                 Specify the directory where Arduino IDE is installed.
						 
	-arduino-device=[uno/mega/leonardo]     Required only when cross-compiling for Arduino.
	                                        Specify the target Arduino board - Uno, Mega 2560
						or Leonardo.

	-mulestl=[yes/no]                       Use libMule's custom bundled C++ library instead of
	                                        libstdc++/libc++/uClibc++. Use this option if the
						target microcontroller's firmware does not have a
						built-in C++ library.

        -nocrosscompile=[yes/no]                Set this option if you are compiling libMule right
                                                on your target device (e.g. you are building libMule
                                                right on your Raspberry Pi). (default: no)

        -mingwcross=[yes/no]                    Set this option to yes if you are cross-compiling a
                                                Windows build of libMule from Linux.


All bugs should be reported to mailto:timprogrammer@rambler.ru.
libMule configure script version $TOOLVERSION running on $HOSTOS
EOF
	exit 0
}

showerror() {
	echo "[ERROR $1] $2"
	exit $1
}

showwarning() {
	echo "[WARNING] $1"
}

arduinoerrormsg() {
	echo "It appears you have forgotten to specify these options:"
	echo " - avr-gcc location. If you have Arduino IDE installed, specify that path using \"-arduino-idedir=[path]\" option. Otherwise, specify it using \"-platformcxx=[path to avr-g++]\"."
	echo " - the target Arduino board. Currently only Arduino Uno, Mega 2560 and Leonardo are supported. Specify the model name using the \"-arduino-device=[model name]\" flag."
	showerror 20 "Not all options were specified. See the message above for more info."

}

# set all variables first
MULEVERSIONMAJOR=0
MULEVERSIONMINOR=4
MULEVERSIONUPDATE=0
MULEVERSION=$MULEVERSIONMAJOR.$MULEVERSIONMINOR.$MULEVERSIONUPDATE
TOOLVERSION=07122018-mingw
if test "$PREFIX" = ""; then
	PREFIX=/opt/timkoisoft/libmule
fi
HOSTCC=$CC
HOSTCXX=$CXX
HOSTCFLAGS=$CFLAGS
HOSTCXXFLAGS=$CXXFLAGS
HOSTLD=$LD
HOSTLDFLAGS=$LDFLAGS
HOSTAR=$AR
HOSTQMAKE=
if test "$TARGETCC" = "" && test "$TARGETCXX" = "" && test "$TARGETCFLAGS" = "" && test "$TARGETCXXFLAGS" = "" && test "$TARGETLD" = "" && test "$TARGETLDFLAGS" = "" && test "$TARGETAR" = ""; then
	TARGETCC=
	TARGETCXX=
	TARGETCFLAGS=
	TARGETCXXFLAGS=
	TARGETLD=
	TARGETLDFLAGS=
	TARGETAR=
fi
TARGETNAME=$MULETARGET
TARGETOS=posix
MODULES=all
SOURCEDIR=`dirname $0`
SOURCEDIR=`sh -c "cd \"$SOURCEDIR\" && pwd"`
CDIR=`pwd`
THINGSTODEFINE="MULE_VERSION_MAJOR=$MULEVERSIONMAJOR MULE_VERSION_MINOR=$MULEVERSIONMINOR MULE_VERSION_UPDATE=$MULEVERSIONUPDATE"
RUNDOWNLOADERSCRIPT=no
DOWNLOADERSCRIPTTARGET=all
DOADDMINUSGTOCOMPILERFLAGS=no
CURRENTDATE=`date +"%d.%m.%Y %H:%M:%S"`
DEPLOYCMD=""
RUNCMD=""
PLATFORMSOURCES=""
PLATFORMHEADERS=""
LIBSOURCES=""
LIBHEADERS=""
HOSTOS=""
HOSTCPU=""
ADDITIONALINCLUDES=""
ADDITIONALLIBS=""
AVROBJCOPY=""
AVRDUDEFLAGS=""
ARDUINOHEADERLOCATION=""
ARDUINOINCLUDEFLAGS=""
ARDUINOTARGETDEVICE=""
NONCROSSBUILD=no
ISTHISWINDOWS=no
MULESTL=no
MULESTLSTREAMS=no
MULESTLSTRINGS=yes
BUGGYFEDORALINUXGCC=no
BUILDQTSTUFF=no
MINGWLINUX=no
REQUIREDARMPLATFORM=no
SOLARISRYZENLINKBUG=no
if test "$NOMICROCONTROLLERSIM" = ""; then
	NOMICROCONTROLLERSIM=no
fi
# placeholder that will be replaced by mktarball.sh script

# display a beautiful header
niceheader
echo ""

# remove old debug configure thing
if test -e "$CDIR/muleconfigure.log"; then
	rm -r -f "$CDIR/muleconfigure.log"
fi

# detect current host CPU
HOSTCPU=`uname -m`
dbgecho "uname -m reports $HOSTCPU"
if test "$HOSTCPU" = "i386" || test "$HOSTCPU" = "i486" || test "$HOSTCPU" = "i586" || test "$HOSTCPU" = "i686" || test "$HOSTCPU" = "ia32" || test "$HOSTCPU" = "i86pc" || test "$HOSTCPU" = "intel32"; then
	HOSTCPU=intel32
elif test "$HOSTCPU" = "x86_64" || test "$HOSTCPU" = "x86-64" || test "$HOSTCPU" = "amd64"; then
	HOSTCPU=amd64
elif echo "$HOSTCPU" | grep -q "arm"; then
	HOSTCPU=arm32
elif echo "$HOSTCPU" | grep -q "aarch"; then
	HOSTCPU=arm64
elif echo "$HOSTCPU" | grep -q "ppc"; then
	HOSTCPU=ppc32
elif test "$HOSTCPU" = "m68k"; then
	HOSTCPU=m68k
elif echo "$HOSTCPU" | grep -q "mips"; then
	HOSTCPU=mips
elif (echo "$HOSTCPU" | grep -q "sun") || (echo "$HOSTCPU" | grep -q "sparc"); then
	HOSTCPU=sparc
else
	HOSTCPU=other
fi

# detect the host operating system first
if test `uname` = "Linux"; then
	dbgecho "$0 is running on Linux, checking distro info"
	HOSTOS="Linux"
	if test -e "/etc/mandriva-release"; then
		dbgecho "Mandriva detected"
		HOSTOS="Mandriva Linux"
	elif test -e "/etc/redhat-release"; then
		dbgecho "RedHat detected"
		HOSTOS="RedHat Linux"
		if test -e "/etc/fedora-release"; then
			dbgecho "Whoah, it's Fedora, it has buggy GCC, better fix GCC flags later"
			HOSTOS="Fedora Linux"
			BUGGYFEDORALINUXGCC=yes
		fi
	elif command -v dpkg > /dev/null 2>&1; then
		dbgecho "Debian detected"
		HOSTOS="Debian Linux"
	elif command -v pacman > /dev/null 2>&1; then
		dbgecho "Arch detected"
		HOSTOS="Arch Linux"
	fi
elif (uname | grep -q "BSD") || test `uname` = "Darwin"; then
	dbgecho "$0 is running on a wild unknown BSD-like operating system... or it's just running on a Mac"
	HOSTOS="4.4BSD"
elif test `uname` = "SunOS"; then
	dbgecho "$0 is running on Sun Solaris, better use grep without -q flag"
	HOSTOS="Sun Solaris"
	if test "$HOSTCPU" = "intel32" || test "$HOSTCPU" = "amd64"; then
		SOLARISRYZENLINKBUG=maybe
	fi
elif (uname | grep -q "CYGWIN") || (uname | grep -q "MINGW") || (uname | grep -q "MSYS"); then
	dbgecho "$0 is running on Windows via MSYS2"
	HOSTOS="Microsoft Windows"
	if uname | grep -q "CYGWIN"; then
		dbgecho "spoiler - this isn't MSYS2, it's Cygwin, gotta use /cygdrive instead of /c"
		ISTHISWINDOWS=cygwin
	else
		ISTHISWINDOWS=msys
	fi
elif test `uname` = "Haiku" || test `uname` = "BeOS"; then
	dbgecho "$0 is running on BeOS"
	HOSTOS="BeOS"
	# use built-in GCC
	if test "$HOSTCC" = "" && test "$HOSTCXX" = "" && test "$HOSTLD" = "" && test "$HOSTAR" = ""; then
		HOSTCC=gcc
		HOSTCXX=g++
		HOSTLD=g++
		HOSTAR=ar
	fi
	if test "$PREFIX" = "/opt/timkoisoft/libmule"; then
		PREFIX=/boot/home/config/non-packaged/timkoisoft/libmule
	fi
else
	dbgecho "$0 is running on a UNIX-like operating system"
	HOSTOS="UNIX-like operating system `uname -m`"
fi

# parse the arguments
for Argument in $*; do
	if test "$Argument" = "--help" || test "$Argument" = "-help" || test "$Argument" = "-h" || test "$Argument" = "/?" || test "$Argument" = "-?"; then
		showhelp
		exit 0
	fi
	FIRSTHALF=`echo "$Argument" | cut -d '=' -f1`
	SECONDHALF=`echo "$Argument" | cut -d '=' -f2`
	if test "$FIRSTHALF" = "-target" || test "$FIRSTHALF" = "-platform"; then
		TARGETNAME="$SECONDHALF"
	elif test "$FIRSTHALF" = "-nocrosscompile"; then
		NONCROSSBUILD="$SECONDHALF"
		if test "$NONCROSSBUILD" = ""; then
			NONCROSSBUILD=yes
		fi
	elif test "$FIRSTHALF" = "-mingwcross"; then
		if test "$SECONDHALF" = ""; then
			SECONDHALF=yes
		fi
		MINGWLINUX="$SECONDHALF"
	elif test "$FIRSTHALF" = "NOMICROCONTROLLERSIM"; then
		NOMICROCONTROLLERSIM="$SECONDHALF"
	elif test "$FIRSTHALF" = "-targetcc" || test "$FIRSTHALF" = "-platformcc"; then
		TARGETCC="$SECONDHALF"
	elif test "$FIRSTHALF" = "-targetcxx" || test "$FIRSTHALF" = "-platformcxx"; then
		TARGETCXX="$SECONDHALF"
		TARGETLD="$SECONDHALF"
	elif test "$FIRSTHALF" = "-targetld" || test "$FIRSTHALF" = "-platformld"; then
		TARGETLD="$SECONDHALF"
	elif test "$FIRSTHALF" = "-targetcflags" || test "$FIRSTHALF" = "-targetcompilerflags" || test "$FIRSTHALF" = "-targetcxxflags" || test "$FIRSTHALF" = "-platformcompilerflags" || test "$FIRSTHALF" = "-platformcxxflags" || test "$FIRSTHALF" = "-platformcflags"; then
		TARGETCXXFLAGS="$TARGETCXXFLAGS $SECONDHALF"
		TARGETCFLAGS="$TARGETCFLAGS $SECONDHALF"
	elif test "$FIRSTHALF" = "-targetldflags" || test "$FIRSTHALF" = "-platformldflags" || test "$FIRSTHALF" = "-targetlinkerflags" || test "$FIRSTHALF" = "-platformlinkerflags"; then
		TARGETLDFLAGS="$SECONDHALF $TARGETLDFLAGS"
	elif test "$FIRSTHALF" = "-targetos" || test "$FIRSTHALF" = "-platformos"; then
		TARGETOS="$SECONDHALF"
	elif test "$FIRSTHALF" = "-targetar" || test "$FIRSTHALF" = "-platformar"; then
		TARGETAR="$SECONDHALF"
	elif test "$FIRSTHALF" = "-targetarch" || test "$FIRSTHALF" = "-platformarch" || test "$FIRSTHALF" = "-targetcpu" || test "$FIRSTHALF" = "-platformcpu"; then
		TARGETCPU="$SECONDHALF"
	elif test "$FIRSTHALF" = "-prefix"; then
		PREFIX="$SECONDHALF"
	elif test "$FIRSTHALF" = "-qmake"; then
		HOSTQMAKE="$SECONDHALF"
	elif test "$FIRSTHALF" = "-debug"; then
		THINGSTODEFINE="MULE_FEATURES_DEBUG $THINGSTODEFINE"
		DOADDMINUSGTOCOMPILERFLAGS=yes
	elif test "$FIRSTHALF" = "-modules"; then
		MODULES="$SECONDHALF"
	elif test "$FIRSTHALF" = "-platformthirdpartytools"; then
		if test "$SECONDHALF" = "" || test "$SECONDHALF" = "true"; then
			SECONDHALF=yes
		fi
		if test "$SECONDHALF" = "yes"; then
			DOWNLOADERSCRIPTTARGET=all
		else
			DOWNLOADERSCRIPTTARGET=crucial
		fi
	elif test "$FIRSTHALF" = "-mulestl"; then
		MULESTL="$SECONDHALF"
		if test "$MULESTL" = ""; then
			MULESTL=yes
		fi
	elif test "$FIRSTHALF" = "-arduino-header"; then
		#if test -e "$SECONDHALF"; then
		#	ARDUINOHEADERLOCATION="$SECONDHALF"
		#else
		#	showerror 19 "\"$SECONDHALF\" doesn't appear to be a valid Arduino.h header. Please specify the path to the Arduino.h header. For example, -arduino-header=/home/tim/Software/arduino-nightly/hardware/arduino/avr/cores/arduino/Arduino.h"
		#fi
		echo "[WARNING] Option \"-arduino-header\" is deprecated."
	elif test "$FIRSTHALF" = "-arduino-idedir"; then
		if test -e "$SECONDHALF"; then
			if test -e "$SECONDHALF/hardware/tools/avr/bin/avr-g++"; then
				TARGETCC="$SECONDHALF/hardware/tools/avr/bin/avr-gcc"
				TARGETCXX="$SECONDHALF/hardware/tools/avr/bin/avr-g++"
				TARGETLD="$TARGETCXX"
				TARGETAR="$SECONDHALF/hardware/tools/avr/bin/avr-gcc-ar"
			fi
		else
			showerror 22 "\"$SECONDHALF\" doesn't appear to be a valid Arduino IDE install prefix."
		fi
	elif test "$FIRSTHALF" = "-arduino-device" || test "$FIRSTHALF" = "-arduino-model"; then
		ARDUINOTARGETDEVICE="$SECONDHALF"
	else
		showwarning "Unknown option: $FIRSTHALF"
	fi
		
done

# disallow user to run configure in the source directory
if test "$CDIR" = "$SOURCEDIR"; then
	echo "[ERROR 99] Please do not run $0 right in the source directory. Create a build directory somewhere and run it from here. For example:"
	echo "cd \"$SOURCEDIR\" && mkdir builddir && cd builddir && ../configure $*"
	exit 99
fi


echo "This script is running on $HOSTOS $HOSTCPU"

if test "$HOSTOS" = "BeOS"; then
	if test `gcc -dumpversion 2>&1 | cut -d '.' -f1` != "2"; then
		echo "GCC 2.95 is not used to build libMule on BeOS, that's good"
	else
		echo "GCC 2.95 is used to build libMule on BeOS, that's really bad"
		showerror 198 "GCC 2 is not supported by libMule"
	fi
fi

dbgecho "Target is $TARGETNAME"
ARDUINOHEADERLOCATION="$SOURCEDIR/src/3rdparty/ArduinoCore-avr-slim/cores/arduino/Arduino.h"
if test "$TARGETNAME" = "rpi"; then
	TARGETNAME=pigpio_rpi
	showwarning "tiny_gpio-based \"rpi\" platform was deprecated and removed from libMule. Please use \"pigpio_rpi\" platform instead."
elif test "$TARGETNAME" = "dummy"; then
	NONCROSSBUILD=yes
elif test "$TARGETNAME" = "microsim" || test "$TARGETNAME" = "mulemicrocontrollersimulator" || test "$TARGETNAME" = "microcontrollersimulator" || test "$TARGETNAME" = "ms"; then
	TARGETNAME=microcontrollersim
	NONCROSSBUILD=yes
elif test "$TARGETNAME" = "arduino" || test "$TARGETNAME" = "arduinoavr" || test "$TARGETNAME" = "avr"; then
	TARGETNAME=arduinoavr
	MULESTL=yes
	THINGSTODEFINE="MULE_INTERNAL_NOEXCEPTIONS MULE_INTERNAL_NOEXIT MULE_INTERNAL_NOSTRINGSTREAMS $THINGSTODEFINE"
	MODULES=arduino
	if test "$ARDUINOTARGETDEVICE" = ""; then
		arduinoerrormsg
	fi
	if test "$ARDUINOTARGETDEVICE" != "uno" && test "$ARDUINOTARGETDEVICE" != "mega" && test "$ARDUINOTARGETDEVICE" != "leonardo"; then
		showerror 21 "Invalid Arduino model name: $ARDUINOTARGETDEVICE."
	fi
	TMP_ARDUINOHEADERDIR=`dirname "$ARDUINOHEADERLOCATION"`
	ARDUINOINCLUDEFLAGS="-I$TMP_ARDUINOHEADERDIR"
	if test "$ARDUINOTARGETDEVICE" = "uno"; then
		ARDUINOINCLUDEFLAGS="$ARDUINOINCLUDEFLAGS -I$TMP_ARDUINOHEADERDIR/../../variants/standard"
		TARGETCXXFLAGS="-mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_UNO -DARDUINO_ARCH_AVR $TARGETCXXFLAGS"
		TARGETCFLAGS="-mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_UNO -DARDUINO_ARCH_AVR $TARGETCFLAGS"
		TARGETLDFLAGS="-mmcu=atmega328p $TARGETLDFLAGS"
		AVRDUDEFLAGS="-patmega328p -cstk500v2 -Pusb"
	elif test "$ARDUINOTARGETDEVICE" = "mega"; then
		ARDUINOINCLUDEFLAGS="$ARDUINOINCLUDEFLAGS -I$TMP_ARDUINOHEADERDIR/../../variants/mega"
		TARGETCXXFLAGS="-mmcu=atmega2560 -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_MEGA2560 -DARDUINO_ARCH_AVR -MMD $TARGETCXXFLAGS"
		TARGETCFLAGS="-mmcu=atmega2560 -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_MEGA2560 -DARDUINO_ARCH_AVR -MMD $TARGETCFLAGS"
		TARGETLDFLAGS="-mmcu=atmega2560 $TARGETLDFLAGS"
		AVRDUDEFLAGS="-patmega2560 -cstk500v2 -Pusb"
	elif test "$ARDUINOTARGETDEVICE" = "leonardo"; then
		ARDUINOINCLUDEFLAGS="$ARDUINOINCLUDEFLAGS -I$TMP_ARDUINOHEADERDIR/../../variants/leonardo"
		TARGETCXXFLAGS="-mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR $TARGETCXXFLAGS"
		TARGETCFLAGS="-mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR $TARGETCFLAGS"
		TARGETLDFLAGS="-mmcu=atmega32u4 $TARGETLDFLAGS"
		AVRDUDEFLAGS="-patmega32u4 -cstk500v2 -Pusb"
	else
		ARDUINOINCLUDEFLAGS="$ARDUINOINCLUDEFLAGS -I$TMP_ARDUINOHEADERDIR/../../variants/standard"
		TARGETCXXFLAGS="-mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_UNO -DARDUINO_ARCH_AVR $TARGETCXXFLAGS"
		TARGETCFLAGS="-mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_UNO -DARDUINO_ARCH_AVR $TARGETCFLAGS"
		TARGETLDFLAGS="-mmcu=atmega328p $TARGETLDFLAGS"
		AVRDUDEFLAGS="-patmega328p -cstk500v2 -Pusb"
	fi
	ARDUINOIDEFLAGS="-w -ffunction-sections -fdata-sections -fno-threadsafe-statics -flto -w -fpermissive"
	TARGETCXXFLAGS="$ARDUINOIDEFLAGS -x c++ -fpermissive -fexceptions $ARDUINOINCLUDEFLAGS $TARGETCXXFLAGS"
	TARGETCFLAGS="$ARDUINOIDEFLAGS -fpermissive -fexceptions $ARDUINOINCLUDEFLAGS $TARGETCFLAGS"
	TARGETLDFLAGS="-mrelax -flto -Wl,--gc-sections,--allow-multiple-definition -fuse-linker-plugin $TARGETLDFLAGS"
	if command -v avr-gcc > /dev/null 2>&1 && command -v avr-g++ > /dev/null 2>&1 && test "$TARGETCC" = "" && test "$TARGETCXX" = "" && test "$TARGETAR" = ""; then
		TARGETCC=`command -v avr-gcc`
		TARGETCXX=`command -v avr-g++`
		TARGETAR=`command -v avr-gcc-ar`
	fi
	if test "$TARGETCC" = "" || test "$TARGETCXX" = "" || test "$TARGETAR" = ""; then
		arduinoerrormsg
	fi
	AVROBJCOPY=`which "$TARGETCC" || echo "$TARGETCC"`
	AVROBJCOPY=`dirname "$TARGETCC"`
	if test "$AVROBJCOPY" = "."; then
		AVROBJCOPY="avr-objcopy"
	else
		AVROBJCOPY="$AVROBJCOPY/avr-objcopy"
	fi
	dbgecho "Detected objcopy: $AVROBJCOPY"
elif test "$TARGETNAME" = "microcontrollersim"; then
	MODULES=arduino
fi

if test "$TARGETNAME" != "dummy" && test "$TARGETNAME" != "microcontrollersim"; then
	dbgecho "Since we aren't compiling a dummy libMule build, keep old GCC flags"
	BUGGYFEDORALINUXGCC=no
fi

if test "$HOSTCC" = "" && test "$HOSTCXX" = ""; then
	printf "Trying to find any supported host C++ compilers... "
	if command -v clang++ > /dev/null 2>&1; then
		HOSTCC=clang
		HOSTCXX=clang++
		HOSTLD=$HOSTCXX
		echo "LLVM detected"
	elif command -v gcc > /dev/null 2>&1; then
		HOSTCC=gcc
		HOSTCXX=g++
		HOSTLD=$HOSTCXX
		echo "GNU C/C++ detected"
	elif command -v CC > /dev/null 2>&1; then
		HOSTCC=cc
		HOSTCXX=CC
		HOSTLD=$HOSTCXX
		if test "$SOLARISRYZENLINKBUG" = "maybe"; then
			SOLARISRYZENLINKBUG=yes
		fi
		echo "Sun Studio C/C++ detected"
	elif command -v c++ > /dev/null 2>&1; then
		HOSTCC=cc
		HOSTCXX=c++
		HOSTLD=$HOSTCXX
		echo "Unknown POSIX-compliant C/C++ compiler detected"
	else
		echo "none were detected"
		showerror 1 "No supported C++ compilers that can generate native code for THIS COMPUTER were found"
	fi
fi
if test "$HOSTAR" = ""; then
	if command -v ar > /dev/null 2>&1; then
		HOSTAR=ar
	else
		showerror 14 "Neither GNU ar nor BSD ar nor Sun Studio ar are installed on this computer. Please install GNU binutils, BSD development tools or Sun Studio 12."
	fi
fi
echo "Host C compiler is $HOSTCC"
echo "Host C++ compiler is $HOSTCXX"
echo "Host linker is $HOSTLD"
if ($HOSTCXX -v 2>&1 | grep -q "clang") || ($HOSTCXX -v 2>&1 | grep -q "gcc"); then
	HOSTCXXFLAGS="-c -g -Os -Wall -Wextra $HOSTCXXFLAGS -std=gnu++0x"
	HOSTCFLAGS="-c -g -Os -Wall -Wextra $HOSTCFLAGS"
	HOSTLDFLAGS="-Os $HOSTLDFLAGS"
elif $HOSTCXX -V 2>&1 | grep -q "Sun C++"; then
	HOSTCXXFLAGS="-c -g -fast -xO3"
	HOSTCFLAGS="-c -g -fast -xO3"
	HOSTLDFLAGS="-fast -xO3"
else
	HOSTCXXFLAGS="-c $HOSTCXXFLAGS"
	HOSTCFLAGS="-c $HOSTCFLAGS"
fi

if test "$TARGETNAME" = ""; then
	showerror 3 "Please specify the target platform by re-running $0 with \"-platform=<platform name here>\" flag."
fi

if test "$HOSTQMAKE" = ""; then
	if command -v qmake > /dev/null 2>&1; then
		HOSTQMAKE=`command -v qmake`
	elif command -v qmake-qt5 > /dev/null 2>&1; then
		HOSTQMAKE=`command -v qmake-qt5`
	elif command -v qmake-qt4 > /dev/null 2>&1; then
		HOSTQMAKE=`command -v qmake-qt4`
	fi
	if test "$MINGWLINUX" != "no"; then
		if command -v mingw32-qmake-qt5; then
			HOSTQMAKE=`command -v mingw32-qmake-qt5`
		elif command -v mingw64-qmake-qt5; then
			HOSTQMAKE=`command -v mingw64-qmake-qt5`
		elif command -v mingw32-qmake-qt4; then
			HOSTQMAKE=`command -v mingw32-qmake-qt4`
		elif command -v mingw64-qmake-qt4; then
			HOSTQMAKE=`command -v mingw64-qmake-qt4`
		fi
	fi
fi

if test "$HOSTQMAKE" != ""; then
	echo "Host Qt qmake is $HOSTQMAKE"
	BUILDQTSTUFF=yes
else
	echo "Could not detect Qt qmake, please specify \"-qmake=[path to qmake]\" if you want to build libMule components that are written in Qt"
	if test "$TARGETNAME" = "microcontrollersim" && test "$NOMICROCONTROLLERSIM" != "yes"; then
		showerror 45 "Qt qmake is required to build Mule Microcontroller Simulator."
	fi
fi


if test ! -e "$SOURCEDIR/src/platformsupport/$TARGETNAME/vars.mcfg"; then
	showerror 2 "The platform you've specified ($TARGETNAME) is not supported by libMule"
fi

MAKEBUILDTOOLS="@echo Do not have to build any additional tools"

while read configfileline; do
	FIRSTHALF=`echo "$configfileline" | cut -d ':' -f1`
	SECONDHALF=`echo "$configfileline" | cut -d ':' -f2 | sed "s/%~/$ARDUINOTARGETDEVICE/g"`
	SECONDHALF=`echo "$SECONDHALF" | sed "s+%O+$AVROBJCOPY+g"`
	SECONDHALF=`echo "$SECONDHALF" | sed "s+%F+$AVRDUDEFLAGS+g"`
	SECONDHALF=`echo "$SECONDHALF" | sed "s/%;/:/g"`
	if test "$FIRSTHALF" = "OS" && test "$TARGETOS" = "posix"; then
		if test "$SECONDHALF" = "Linux" || test "$SECONDHALF" = "linux"; then
			TARGETOS=linux
			THINGSTODEFINE="MULE_OS_LINUX MULE_OS_UNIX $THINGSTODEFINE"
		elif test "$SECONDHALF" = "QNX" || test "$SECONDHALF" = "qnx"; then
			TARGETOS=qnx
			THINGSTODEFINE="MULE_OS_QNX MULE_OS_UNIX $THINGSTODEFINE"
		elif test "$SECONDHALF" = "BSD" || test "$SECONDHALF" = "bsd"; then
			TARGETOS=unix
			THINGSTODEFINE="MULE_OS_BSD MULE_OS_UNIX $THINGSTODEFINE"
		elif test "$SECONDHALF" = "UNIX" || test "$SECONDHALF" = "unix"; then
			TARGETOS=unix
			THINGSTODEFINE="MULE_OS_UNIX $THINGSTODEFINE"
		elif test "$SECONDHALF" = "POSIX" || test "$SECONDHALF" = "posix"; then
			TARGETOS=posix
			THINGSTODEFINE="MULE_OS_UNIX $THINGSTODEFINE"
		else
			TARGETOS=none
			THINGSTODEFINE="MULE_OS_NOFIRMWARE $THINGSTODEFINE"
		fi
	elif test "$FIRSTHALF" = "PlatformID"; then
		THINGSTODEFINE="$SECONDHALF $THINGSTODEFINE"
	elif test "$FIRSTHALF" = "HardwarePinType"; then
		THINGSTODEFINE="MULE_OTHER_HWPINTYPE=$SECONDHALF $THINGSTODEFINE"
	elif test "$FIRSTHALF" = "MotorStopCode"; then
		THINGSTODEFINE="MULE_OTHER_MOTORSTOPCODE=$SECONDHALF $THINGSTODEFINE"
	elif test "$FIRSTHALF" = "StringType"; then
		if test "$SECONDHALF" = "stdstring" || test "$SECONDHALF" = "string"; then
			THINGSTODEFINE="MULE_OTHER_STRINGTYPE=std::string $THINGSTODEFINE"
		fi
	elif test "$FIRSTHALF" = "Defines"; then
		THINGSTODEFINE="$SECONDHALF $THINGSTODEFINE"
	elif test "$FIRSTHALF" = "HasCout"; then
		if test "$SECONDHALF" = "yes" || test "$SECONDHALF" = "true"; then
			THINGSTODEFINE="MULE_FEATURES_SUPPORTSCOUT $THINGSTODEFINE"
		fi
	elif test "$FIRSTHALF" = "InternalErrorsLCD"; then
		if test "$SECONDHALF" = "yes" || test "$SECONDHALF" = "true"; then
			THINGSTODEFINE="MULE_INTERNAL_PRINTINTERNALERRORSLCD $THINGSTODEFINE"
		fi
	elif test "$FIRSTHALF" = "ARM"; then
		if test "$SECONDHALF" != "no"; then
			REQUIREDARMPLATFORM="$SECONDHALF"
		fi
	elif test "$FIRSTHALF" = "RequiredCommands" || test "$FIRSTHALF" = "Commands"; then
		if test "$HOSTOS" != "Microsoft Windows" && test "$HOSTOS" != "4.4BSD"; then
			echo "Platform $TARGETNAME needs additional build tools to operate properly"
			MISSINGCOMMANDS=""
			for CommandToFind in $SECONDHALF; do
				if command -v $CommandToFind > /dev/null 2>&1 || which $CommandToFind > /dev/null 2>&1 || whereis $CommandToFind > /dev/null 2>&1; then
					echo "$CommandToFind is installed"
				else
					echo "$CommandToFind is not installed"
					MISSINGCOMMANDS="$CommandToFind $MISSINGCOMMANDS"
				fi
			done
			if test "$MISSINGCOMMANDS" != ""; then
				showerror 164 "These commands are unavailable and need to be installed: $MISSINGCOMMANDS"
			fi
		fi
	elif test "$FIRSTHALF" = "Requires3rdPartyDownloads"; then
		if test "$SECONDHALF" = "yes" || test "$SECONDHALF" = "true"; then
			showwarning "The platform you have chosen depends on third-party libraries. By continuing to build libMule, you agree to the terms of licenses used by the downloaded libraries. See $SOURCEDIR/src/3rdparty/README for more info."
			RUNDOWNLOADERSCRIPT=yes
		fi
BeOS	elif test "$FIRSTHALF" = "AdditionalCompilerFlags"; then
		ADDITIONALINCLUDES="$SECONDHALF $ADDITIONALINCLUDES"
	elif test "$FIRSTHALF" = "AdditionalLinkerFlags"; then
		ADDITIONALLIBS="$TARGETLDFLAGS $SECONDHALF"
	elif test "$FIRSTHALF" = "AfterBuildCompilerFlags"; then
		TARGETCXXFLAGS="$TARGETCXXFLAGS $SECONDHALF"
		TARGETCFLAGS="$TARGETCFLAGS $SECONDHALF"
	elif test "$FIRSTHALF" = "AfterBuildLinkerFlags"; then
		TARGETLDFLAGS="$TARGETLDFLAGS $SECONDHALF"
	elif test "$FIRSTHALF" = "DeployCommand" && test "$DOWNLOADERSCRIPTTARGET" = "all"; then
		DEPLOYCMD="$SECONDHALF"
	elif test "$FIRSTHALF" = "RemoteRunCommand" && test "$DOWNLOADERSCRIPTTARGET" = "all"; then
		RUNCMD="$SECONDHALF"
	elif test "$FIRSTHALF" = "MakeBuildTools" && test "$DOWNLOADERSCRIPTTARGET" = "all"; then
		MAKEBUILDTOOLS="$SECONDHALF"
	elif test "$FIRSTHALF" = "Sources"; then
		for SourceFilePL in $SECONDHALF; do
			PLATFORMSOURCES="$SOURCEDIR/src/platformsupport/$TARGETNAME/$SourceFilePL $PLATFORMSOURCES"
		done
	elif test "$FIRSTHALF" = "Headers"; then
		for HeaderPL in $SECONDHALF; do
			PLATFORMHEADERS="$SOURCEDIR/src/platformsupport/$TARGETNAME/$HeaderPL $PLATFORMHEADERS"
		done
	fi
done < "$SOURCEDIR/src/platformsupport/$TARGETNAME/vars.mcfg"

echo "Platform configuration file $SOURCEDIR/src/platformsupport/$TARGETNAME/vars.mcfg was imported successfully, can continue"
if test "$NONCROSSBUILD" != "no"; then
	TARGETCC=$HOSTCC
	TARGETCXX=$HOSTCXX
	TARGETLD=$HOSTLD
	TARGETAR=$HOSTAR
	DEPLOYCMD="echo %A"
	RUNCMD="%A"
	if test "$TARGETNAME" = "microcontrollersim"; then
		RUNCMD="$PREFIX/bin/mulemicrosim \"%A\""
		if test "$MINGWLINUX" != "no"; then
			RUNCMD="/c/$PREFIX/bin/mulemicrosim.exe \"%A\""
		fi
	fi
	if test "$SOLARISRYZENLINKBUG" = "yes"; then
		DEPLOYCMD="elfedit -e \'cap:hw1 0x1800\' \"%A\""
	fi
else
	if test "$TARGETCC" = "" || test "$TARGETCXX" = "" || test "$TARGETAR" = ""; then
		CANFINDALTCOMPILER=no
		dbgecho "Try to find an alternative ARM compiler"
		if test "$REQUIREDARMPLATFORM" != "no"; then
			POSSIBLEARMPREFIXES="arm-linux-gnu arm-mandriva-linux-gnu arm-mandriva-linux-gnueabi arm-linux-gnueabi arm-none-linux-gnu arm-none-linux-gnueabi arm-none-linux-gnueabihf arm-mandriva-linux-gnueabihf arm-linux-gnueabihf"
			if test `echo "$REQUIREDARMPLATFORM" | cut -d '/' -f1` = "64"; then
				POSSIBLEARMPREFIXES="aarch64-linux-gnu aarch64-mandriva-linux-gnu aarch64-none-linux-gnu aarch64-linux-gnueabi aarch64-mandriva-linux-gnueabi aarch64-none-linux-gnueabi aarch64-linux-gnueabihf aarch64-none-linux-gnueabihf aarch64-mandriva-linux-gnueabi"
				REQUIREDARMPLATFORM=`echo "$REQUIREDARMPLATFORM" | cut -d '/' -f2`
			fi
			dbgecho "POSSIBLEARMPREFIXES=$POSSIBLEARMPREFIXES"
			cat >>"$CDIR/armcctest.cxx"<<EOF
#include <iostream>

int main() {
	std::cout << "Test\n";
	return 0;
}
EOF
			POSSIBLETARGETCXX=""
			POSSIBLETARGETCC=""
			POSSIBLETARGETAR=""
			for ARMPrefix in $POSSIBLEARMPREFIXES; do
				dbgecho "$ARMPrefix arm prefix"
				if command -v $ARMPrefix-g++ > /dev/null 2>&1; then
					dbgecho "found gcc"
					POSSIBLETARGETCXX=`command -v $ARMPrefix-g++`
					POSSIBLETARGETCC=`command -v $ARMPrefix-gcc`
					POSSIBLETARGETAR=`command -v $ARMPrefix-ar`
				elif command -v $ARMPrefix-clang++ > /dev/null 2>&1; then
					dbgecho "found llvm"
					POSSIBLETARGETCXX=`command -v $ARMPrefix-clang++`
					POSSIBLETARGETCC=`command -v $ARMPrefix-clang`
					POSSIBLETARGETAR=`command -v $ARMPrefix-ar`
				else
					dbgecho "not found"
					POSSIBLETARGETCXX="dummyerror"
					POSSIBLETARGETCC="dummyerror"
					POSSIBLETARGETAR="dummyerror"
				fi
				if $POSSIBLETARGETCXX -o "$CDIR/armcctest.bin" -g -Os -mtune=$REQUIREDARMPLATFORM -std=c++0x "$CDIR/armcctest.cxx" > armcctest.log 2>&1; then
					dbgecho "this compiler works"
					rm -r -f "$CDIR/armcctest.bin" "$CDIR/armcctest.log"
				else
					dbgecho `cat "$CDIR/armcctest.log"`
					POSSIBLETARGETCXX=""
				fi
				if test "$POSSIBLETARGETCXX" != ""; then
					CANFINDALTCOMPILER=yes
					break
				fi
			done
			rm -r -f "$CDIR/armcctest.bin" "$CDIR/armcctest.cxx" "$CDIR/armcctest.log"
			if test "$POSSIBLETARGETCXX" != ""; then
				TARGETCC="$POSSIBLETARGETCC"
				TARGETCXX="$POSSIBLETARGETCXX"
				TARGETLD="$TARGETCXX"
				TARGETAR="$POSSIBLETARGETAR"
			fi
		fi
		if test "$CANFINDALTCOMPILER" != "yes"; then
			showerror 4 "No C++ compiler for the TARGET PLATFORM was specified. Please re-run $0 with \"-platformcc=<path to the C cross-compiler> -platformcxx=<path to the C++ cross-compiler> -platformar=<path to the GNU ar (or any other POSIX-compartible ar utility) program>\" flags."
		fi
	fi

	if test "$TARGETLD" = ""; then
		TARGETLD=$TARGETCXX
	fi
fi

echo "Target C compiler is $TARGETCC"
echo "Target C++ compiler is $TARGETCXX"
echo "Target linker is $TARGETLD"
if ($TARGETCXX -v 2>&1 | grep -q "clang") || ($TARGETCXX -v 2>&1 | grep -q "gcc"); then
	TARGETCXXFLAGS="-c -Os -Wall -Wextra $TARGETCXXFLAGS -std=gnu++0x"
	TARGETCFLAGS="-c -Os -Wall -Wextra $TARGETCFLAGS"
	if test "$BUGGYFEDORALINUXGCC" = "no"; then
		TARGETLDFLAGS="-static-libgcc -static-libstdc++ $TARGETLDFLAGS"
	else
		TARGETLDFLAGS="$TARGETLDFLAGS"
	fi
elif $TARGETCXX -V 2>&1 | grep -q "Sun C++"; then
	TARGETCXXFLAGS="-c -fast -xO3 $TARGETCXXFLAGS"
	TARGETCFLAGS="-c -fast -xO3 $TARGETCFLAGS"
	TARGETLDFLAGS=""
else
	showerror 5 "Unsupported C++ cross-compiler $TARGETCXX. Please try to find either a GCC or a Clang toolchain for your target platform."
fi

if test "$DOADDMINUSGTOCOMPILERFLAGS" = "yes"; then
	TARGETCXXFLAGS="$TARGETCXXFLAGS -g"
	TARGETCFLAGS="$TARGETCFLAGS -g"
fi

if test -e "$CDIR/MuleToolBootstrapFiles"; then
	rm -r -f "$CDIR/MuleToolBootstrapFiles"
fi

mkdir "$CDIR/MuleToolBootstrapFiles"
printf "Creating $CDIR/MuleToolBootstrapFiles/muletool.."
if $HOSTLD $HOSTLDFLAGS -I$SOURCEDIR/src/ideintegration/muletool -DTOOLPREFIX=\"$PREFIX\" -DTOOLTARGET=\"$TARGETNAME\" -o "$CDIR/MuleToolBootstrapFiles/muletool" "$SOURCEDIR/src/ideintegration/muletool/muletoolclass.cpp" "$SOURCEDIR/src/ideintegration/muletool/main.cpp" ; then
	echo ". done!"
else
	echo ". failed!"
	showerror 9 "Failed to link $CDIR/MuleToolBootstrapFiles/muletool"
fi

if test "$SOLARISRYZENLINKBUG" = "yes"; then
	printf "Fixing $CDIR/MuleToolBootstrapFiles/muletool so that it could run on modern Intel Core/AMD Ryzen desktops and laptops with Oracle Solaris... "
	if elfedit -e 'cap:hw1 0x1800' "$CDIR/MuleToolBootstrapFiles/muletool"; then
		echo "done!"
	else
		echo "failed!"
		showerror 107 "Failed to link $CDIR/MuleToolBootstrapFiles/muletool"
	fi
fi

if test "$MINGWLINUX" != "no"; then
	MINGWCC=""
	MINGWCXX=""
	MINGWLD=""
	MINGWAR=""
	if command -v i686-w64-mingw32-g++ > /dev/null 2>&1; then
		MINGWCC="i686-w64-mingw32-gcc"
		MINGWCXX="i686-w64-mingw32-g++"
		MINGWLD="i686-w64-mingw32-g++"
		MINGWAR="i686-w64-mingw32-ar"
	elif command -v x86_64-w64-mingw32-g++ > /dev/null 2>&1; then
		MINGWCC="x86_64-w64-mingw32-gcc"
		MINGWCXX="x86_64-w64-mingw32-g++"
		MINGWLD="x86_64-w64-mingw32-g++"
		MINGWAR="x86_64-w64-mingw32-ar"
	elif test "$WINDOWSCC" != "" && test "$WINDOWSCXX" != "" && test "$WINDOWSAR" != ""; then
		MINGWCC="$WINDOWSCC"
		MINGWCXX="$WINDOWSCXX"
		if test "$WINDOWSLD" != ""; then
			MINGWLD="$WINDOWSLD"
		else
			MINGWLD="$MINGWCXX"
		fi
		MINGWAR="$WINDOWSAR"
	else
		showerror 21 "No MinGW32 cross-toolchains are installed or available in \$PATH. If you have MinGW32 cross-compilers installed in a different prefix, then specify them using \$WINDOWSCC, \$WINDOWSCXX and \$WINDOWSLD variables."
	fi
	MINGWCFLAGS="-c -Os -static -fPIC -Wall -Wextra -DMULE_OTHER_MINGWCROSSCOMPILE $WINDOWSCFLAGS"
	MINGWCXXFLAGS="-c -Os -static -fPIC -Wall -Wextra -DMULE_OTHER_MINGWCROSSCOMPILE -std=gnu++0x $WINDOWSCXXFLAGS"
	MINGWLDFLAGS="$WINDOWSLDFLAGS"
	echo "MinGW32 C compiler: $MINGWCC $MINGWCFLAGS"
	echo "MinGW32 C++ compiler: $MINGWCXX $MINGWCXXFLAGS"
	echo "MinGW32 linker: $MINGWLD $MINGWLDFLAGS"
	BEFOREMINGWPREFIX="$PREFIX"
	PREFIX="/c/$BEFOREMINGWPREFIX"
	printf "Creating $CDIR/MuleToolBootstrapFiles/muletool-mingw32.exe.."
	if $MINGWLD $MINGWLDFLAGS -I$SOURCEDIR/src/ideintegration/muletool -DTOOLPREFIX=\"$PREFIX\" -DTOOLTARGET=\"$TARGETNAME\" -o "$CDIR/MuleToolBootstrapFiles/muletool-mingw32.exe" "$SOURCEDIR/src/ideintegration/muletool/muletoolclass.cpp" "$SOURCEDIR/src/ideintegration/muletool/main.cpp" ; then
		echo ". done!"
		HOSTCC="$MINGWCC"
		HOSTCXX="$MINGWCXX"
		HOSTLD="$MINGWLD"
		HOSTCFLAGS="$MINGWCFLAGS"
		HOSTCXXFLAGS="$MINGWCXXFLAGS"
		HOSTLDFLAGS="$MINGWLDFLAGS"
		if test "$NONCROSSBUILD" != "no"; then
			TARGETCC="$MINGWCC"
			TARGETCXX="$MINGWCXX"
			TARGETLD="$MINGWLD"
			TARGETAR="$MINGWAR"
			TARGETCFLAGS="$MINGWCFLAGS"
			TARGETCXXFLAGS="$MINGWCXXFLAGS"
			TARGETLDFLAGS="$MINGWLDFLAGS"
		fi
	else
		echo ". failed!"
		showerror 19 "Failed to link $CDIR/MuleToolBootstrapFiles/muletool-mingw32.exe"
	fi
fi

if test "$MULESTL" = "yes"; then
	TARGETCXXFLAGS="-I$PREFIX/include/libmule/extras/mulestl $TARGETCXXFLAGS"
	TARGETCFLAGS="-I$PREFIX/include/libmule/extras/mulestl $TARGETCFLAGS"
fi

printf "Creating $CDIR/MuleToolBootstrapFiles/MuleTool.mcfg... "
echo "# Automatically generated by libMule configure script on $CURRENTDATE" > "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "# paths to various tools, including C and C++ compilers, as well as the linker" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "CC:$TARGETCC" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "CXX:$TARGETCXX" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "LD:$TARGETLD" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "# you may modify these variables in case if you want MuleTool to invoke compilers with different flags" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "CFLAGS:$TARGETCFLAGS" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "CXXFLAGS:$TARGETCXXFLAGS" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "LDFLAGS:$TARGETLDFLAGS" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "# deployment support" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "LIBMULE:$PREFIX" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "TARGET:$TARGETNAME" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "DEPLOY:$DEPLOYCMD" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "RUN:$RUNCMD" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "" >> "$CDIR/MuleToolBootstrapFiles/MuleTool.mcfg"
echo "done!"


if test "$RUNDOWNLOADERSCRIPT" = "yes"; then
	printf "Downloading required third-party libraries (this might take a while)... "
	if sh -c "if test \"$DISABLETHIRDPARTYDOWNLOADER\" = \"yes\"; then exit 0; fi && cd \"$SOURCEDIR/src/3rdparty\" && ./download-3rdparty-components.sh clean && ./download-3rdparty-components.sh $DOWNLOADERSCRIPTTARGET" > "$CDIR/dl.log" 2>&1; then
		echo "done!"
		rm -r -f "$CDIR/dl.log"
	else
		echo "failed!"
		cat "$CDIR/dl.log"
		rm -r -f "$CDIR/dl.log"
		showerror 12 "Third-party libraries could not be downloaded properly"
	fi
fi

if test "$TARGETNAME" = "arduinoavr" && test -e "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp"; then
	mv "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp" "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp.old"
	ARDUINOSERIALDEVICE=""
	if test "$ARDUINOTARGETDEVICE" = "mega"; then
		ARDUINOSERIALDEVICE=Serial2
	elif test "$ARDUINOTARGETDEVICE" = "leonardo"; then
		ARDUINOSERIALDEVICE=Serial1
	else
		ARDUINOSERIALDEVICE=NULL
	fi
	cat "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp.old" | sed "s+#define ARDUINOSTL_DEFAULT_SERIAL Serial+#define ARDUINOSTL_DEFAULT_SERIAL $ARDUINOSERIALDEVICE+g" > "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp"
	if test "$ARDUINOSERIALDEVICE" = "NULL"; then
		rm -r -f "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp.old"
		mv "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp" "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp.old"
		cat "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp.old" | sed "s+#define ARDUINOSTL_DEFAULT_CIN_COUT+// define ARDUINOSTL_DEFAULT_CIN_COUT for cin/cout implementation+g" > "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp"
	fi
	rm -r -f "$SOURCEDIR/src/3rdparty/ArduinoSTL-master/src/ArduinoSTL.cpp.old"
fi

# deal with modules
if test "$MODULES" = "all" || test "$MODULES" = "everything"; then
	MODULES="core,fileio,sound,pwmdevices,sensors"
elif test "$MODULES" = "minimal"; then
	MODULES="core"
elif test "$MODULES" = "arduino"; then
	MODULES="core,pwmdevices,sensors"
fi
MODULES=`echo "$MODULES" | sed 's/,/ /g'`
MODULES=" $MODULES" # workaround for a further discovered bug in this script that never could detect "core" as an available module
echo "$MODULES"

dbgecho "looking for various modules"
for ModuleName in $MODULES; do
	POSSIBLEMODULESFILELIST=`find "$SOURCEDIR/src" -type f -name "module.mcfg"`
	ModuleGatheredSources=""
	ModuleGatheredHeaders=""
	ModuleGatheredPrefix=""
	FoundProperModule=no
	printf "Preparing module $ModuleName... "
	dbgecho "Module $ModuleName"
	for ModuleFileDescription in $POSSIBLEMODULESFILELIST; do
		if cat "$ModuleFileDescription" | grep -q "Name:$ModuleName"; then
			FoundProperModule=yes
			dbgecho "found one in $ModuleFileDescription"
			echo " " >> "$ModuleFileDescription" # a workaround so that the whole file would be read and parsed by configure and not just a tiny part of it
			while read moduleline; do
				FIRSTHALF=`echo "$moduleline" | cut -d ':' -f1`
				SECONDHALF=`echo "$moduleline" | cut -d ':' -f2`
				if test "$FIRSTHALF" = "Subdir"; then
					ModuleGatheredPrefix="$SOURCEDIR/src/$SECONDHALF"
				elif test "$FIRSTHALF" = "Sources"; then
					dbgecho "$SECONDHALF"
					for ModuleSourceFile in $SECONDHALF; do
						ModuleGatheredSources="$ModuleGatheredPrefix/$ModuleSourceFile $ModuleGatheredSources"
					done
				elif test "$FIRSTHALF" = "Headers"; then
					for ModuleHeadFile in $SECONDHALF; do
						ModuleGatheredHeaders="$ModuleGatheredPrefix/$ModuleHeadFile $ModuleGatheredHeaders"
					done
				elif test "$FIRSTHALF" = "ModuleID"; then
					THINGSTODEFINE="$THINGSTODEFINE $SECONDHALF"
				elif test "$FIRSTHALF" = "BrokenPlatforms"; then
					for PlatformInModule in $SECONDHALF; do
						if test "$PlatformInModule" = "$TARGETNAME"; then
							echo "failed!"
							showerror 11 "Module $ModuleName does not work with your target platform. Try disabling it."
						fi
					done
				elif test "$FIRSTHALF" = "Requires"; then
					for ModuleDependency in $SECONDHALF; do
						if echo "$MODULES" | grep -q " $ModuleDependency"; then
							sleep 1
						else
							echo "failed!"
							showerror 9 "Module $ModuleName requires $ModuleDependency to be enabled, you have disabled that module (or your platform does not support it). Please enable that module to continue."
						fi
					done
				fi
			done < "$ModuleFileDescription"
			break
		fi
	done
	if test "$FoundProperModule" = "no"; then
		echo "failed!"
		showerror 10 "No such module: $ModuleName"
	fi
	LIBSOURCES="$LIBSOURCES $ModuleGatheredSources"
	LIBHEADERS="$LIBHEADERS $ModuleGatheredHeaders"
	echo "done!"
done
LIBSOURCES="$PLATFORMSOURCES $LIBSOURCES"
LIBHEADERS="$PLATFORMHEADERS $LIBHEADERS"

if test -e "$CDIR/src"; then
	rm -r -f "$CDIR/src"
fi

mkdir -p "$CDIR/src/core"
printf "Creating $CDIR/src/core/muleconfig.h... "
echo "// Automatically generated by libMule configure script on $CURRENTDATE" > "$CDIR/src/core/muleconfig.h"
echo "// muleconfig.h" >> "$CDIR/src/core/muleconfig.h"
echo "// Part of libMule - Microcontroller Library (that is Extendable)" >> "$CDIR/src/core/muleconfig.h"
echo "// Copyright (c) Tim K <timprogrammer@rambler.ru> 2019. Licensed under GNU LGPLv2.1." >> "$CDIR/src/core/muleconfig.h"
echo "" >> "$CDIR/src/core/muleconfig.h"
echo "#ifndef MULECONFIG_H" >> "$CDIR/src/core/muleconfig.h"
echo "#define MULECONFIG_H" >> "$CDIR/src/core/muleconfig.h"
for DefineGen in $THINGSTODEFINE; do
	FIRSTHALF=""
	SECONDHALF=""
	if echo "$DefineGen" | grep -q "="; then
		FIRSTHALF=`echo "$DefineGen" | cut -d '=' -f1`
		SECONDHALF=`echo "$DefineGen" | cut -d '=' -f2`
	else
		FIRSTHALF="$DefineGen"
		SECONDHALF=""
	fi
	echo "#define $FIRSTHALF $SECONDHALF" >> "$CDIR/src/core/muleconfig.h"
done
echo "#endif" >> "$CDIR/src/core/muleconfig.h"
echo "done!"

if test "$MULESTL" = "yes"; then
	for MuleSTLHead in cmath cstdarg cstdlib string vector; do
		PLATFORMHEADERS="$SOURCEDIR/src/platformsupport/$TARGETNAME/../../../extras/mulestl/$MuleSTLHead $PLATFORMHEADERS"
	done
	mkdir -p "$CDIR/extras/mulestl"
	printf "Creating $CDIR/extras/mulestl/mulestlconfig.h... "
	echo "// Automatically generated by libMule configure script on $CURRENTDATE" > "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#ifndef MULESTLCONFIG_H" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTLCONFIG_H" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	if test "$MULESTLSTREAMS" = "yes"; then
		echo "#define MULESTL_FEATURES_STREAMS" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	fi
	if test "$MULESTLSTRINGS" = "yes"; then
		echo "#define MULESTL_FEATURES_STRINGS" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	fi
	if test "$TARGETNAME" = "arduinoavr"; then
		echo "#define MULESTL_ARDUINOSTANDARDS" >> "$CDIR/extras/mulestl/mulestlconfig.h"
		echo "#define MULESTL_HEADERS_NOSIGNALH" >> "$CDIR/extras/mulestl.h"
		echo "#define MULESTL_OSTREAM_ARDUINOSERIALPORTBEGINARG 9600" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	elif test "$TARGETOS" = "bsd"; then
		echo "#define MULESTL_BSDSTANDARDS" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	elif test "$TARGETOS" = "linux"; then
		echo "#define MULESTL_LINUXSTANDARDS" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	fi
	if test "$TARGETNAME" != "arduinoavr"; then
		echo "#define MULESTL_FEATURES_DOCXX11" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	else
		echo "#define MULESTL_ARDUINO_REDEFINEGCCSTUFF" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	fi
	echo "#define MULESTL_POSIXSTANDARDS" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTL_VECTOR_MAXELEMENTCOUNT 100" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTL_VECTOR_REQUIREDELEMENTCOUNT 1" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTL_VECTOR_MINIMALISTICVECTORSTART 3" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTL_STREAMS_COUTSTR \"devcout\"" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTL_STREAMS_CINSTR \"devcin\"" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTL_STREAMS_CERRSTR \"devcout\"" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTL_FEATURES_NEEDFAKESYSTEM" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#define MULESTL_FEATURES_NEEDFAKEEXIT" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	if echo "$THINGSTODEFINE" | grep -q "MULE_FEATURES_DEBUG"; then
		echo "#define MULESTL_FEATURES_DEBUG" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	fi
	echo "# ifndef NULL" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "# define NULL 0" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "# endif" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "#endif" >> "$CDIR/extras/mulestl/mulestlconfig.h"
	echo "done!"
	ADDITIONALINCLUDES="-I\$(SOURCEDIR)/extras/mulestl -Iextras/mulestl"
fi	


printf "Creating required subdirectories."
for LibDirFile in $LIBSOURCES $LIBHEADERS; do
	DIRNAME=`dirname "$LibDirFile"`
	DIRNAME=`echo "$DIRNAME" | sed "s+$SOURCEDIR++g"`
	if test -e "$CDIR/$DIRNAME"; then
		printf '.'
	else
		if mkdir -p "$CDIR/$DIRNAME" > /dev/null 2>&1; then
			printf '.'
		else
			printf ". failed!"
			showerror 13 "Failed to create all the required subdirectories"
		fi
	fi
done
echo ". done!"

printf "Removing source directory path out of \$LIBSOURCES and \$LIBHEADERS variables so that make would be happy... "
FINALSOURCES=""
FINALHEADERS=""
FINALTARGETS=""
for LibSourceFileAgain in $LIBSOURCES; do
	TOWRITESOURCE=`echo "$LibSourceFileAgain" | sed "s+$SOURCEDIR/++g"`
	FINALSOURCES="$FINALSOURCES $TOWRITESOURCE"
	TOWRITESOURCE="$TOWRITESOURCE.libmulebuild.o"
	FINALTARGETS="$FINALTARGETS $TOWRITESOURCE"
done
#for LibHeaderFileAgain in $LIBHEADERS; do
#	TOWRITEHEADER=`echo "$LibHeaderFileAgain" | sed "s+$SOURCEDIR/++g"`
#	FINALHEADERS="$FINALHEADERS $TOWRITEHEADER"
#done
FINALHEADERS=`sh -c "find \"$SOURCEDIR\" -type f -name \"*.h\""`
dbgecho "$FINALHEADERS"
echo "done!"

if test "$MINGWLINUX" != "no"; then
	PREFIX="$BEFOREMINGWPREFIX"
fi

printf "Creating $CDIR/Makefile... "
if test -e "$CDIR/Makefile"; then
	rm -r -f "$CDIR/Makefile"
fi
echo "# Automatically generated by libMule configuration script on $CURRENTDATE" > "$CDIR/Makefile"
echo "MULETOOL ?= \"$CDIR/MuleToolBootstrapFiles/muletool\"" >> "$CDIR/Makefile"
echo "SOURCEDIR ?= $SOURCEDIR" >> "$CDIR/Makefile"
echo "TARGETAR ?= $TARGETAR" >> "$CDIR/Makefile"
echo "TARGETS = $FINALTARGETS" >> "$CDIR/Makefile"
echo "PREFIX = \$(RPMBUILDROOT)/$PREFIX" >> "$CDIR/Makefile"
echo "" >> "$CDIR/Makefile"
if test "$BUILDQTSTUFF" != "yes"; then
	echo "all lib: build-static-libmule" >> "$CDIR/Makefile"
else
	echo "all: lib qtmicrocontrollersim" >> "$CDIR/Makefile"
	echo "" >> "$CDIR/Makefile"
	echo "lib: build-static-libmule" >> "$CDIR/Makefile"
fi
echo "" >> "$CDIR/Makefile"
echo "build-static-libmule:" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "\$(MAKE) \$(TARGETS)" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "\$(TARGETAR) rcs libMule.a \$(TARGETS)" >> "$CDIR/Makefile"
echo "" >> "$CDIR/Makefile"
echo "\$(TARGETS):" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "\$(MULETOOL) -quiet -config MuleToolBootstrapFiles/MuleTool.mcfg -compile \$(SOURCEDIR)/\$(shell printf \`dirname \"\$@\"\` && printf '/' && printf \`basename \"\$@\" .libmulebuild.o\`) -o \"\$@\" -nolibmule -I\$(SOURCEDIR)/src -Isrc $ADDITIONALINCLUDES" >> "$CDIR/Makefile"
echo "" >> "$CDIR/Makefile"
echo "clean:" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "rm -r -f libMule.a \$(TARGETS)" >> "$CDIR/Makefile"
echo "" >> "$CDIR/Makefile"
echo "distclean: clean" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "rm -r -f MuleToolBootstrapFiles/ src/core/muleconfig.h" >> "$CDIR/Makefile"
echo "" >> "$CDIR/Makefile"
echo "install:" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "if test ! -e \"\$(PREFIX)\"; then mkdir -p \"\$(PREFIX)\"; fi" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "-mkdir -p \"\$(PREFIX)/bin\" \"\$(PREFIX)/etc\" \"\$(PREFIX)/lib\" \"\$(PREFIX)/include/libmule\"" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
if test "$MINGWLINUX" != "no"; then
	echo "cp MuleToolBootstrapFiles/muletool-mingw32.exe \"\$(PREFIX)/bin/muletool.exe\" && cp MuleToolBootstrapFiles/MuleTool.mcfg \"\$(PREFIX)/etc/MuleTool.mcfg\"" >> "$CDIR/Makefile"
else
	echo "cp MuleToolBootstrapFiles/muletool \"\$(PREFIX)/bin/muletool\" && cp MuleToolBootstrapFiles/MuleTool.mcfg \"\$(PREFIX)/etc/MuleTool.mcfg\" && if test -e \"\$(PREFIX)/muletool\"; then unlink \"\$(PREFIX)/muletool\"; fi && ln -s \"\$(PREFIX)/bin/muletool\" \"\$(PREFIX)/muletool\"" >> "$CDIR/Makefile"
fi
printf "\t\t" >> "$CDIR/Makefile"
echo "$MAKEBUILDTOOLS" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "PREFIX=\"\$(PREFIX)\" SOURCEDIR=\"\$(SOURCEDIR)\" ./installheaders.sh && cp src/core/muleconfig.h \"\$(PREFIX)/include/libmule/core/muleconfig.h\""  >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "cp libMule.a \"\$(PREFIX)/lib/libMule.a\"" >> "$CDIR/Makefile"
if test "$MULESTL" = "yes"; then
	printf "\t\t" >> "$CDIR/Makefile"
	echo "-mkdir -p \"\$(PREFIX)/include/libmule/extras/mulestl\"" >> "$CDIR/Makefile"
	printf "\t\t" >> "$CDIR/Makefile"
	echo "cp extras/mulestl/mulestlconfig.h \"\$(PREFIX)/include/libmule/extras/mulestl/mulestlconfig.h\"" >> "$CDIR/Makefile"
	printf "\t\t" >> "$CDIR/Makefile"
	echo "cp \$(SOURCEDIR)/extras/mulestl/* \"\$(PREFIX)/include/libmule/extras/mulestl/\"" >> "$CDIR/Makefile"
	printf "\t\t" >> "$CDIR/Makefile"
	echo "rm -r -f \$(PREFIX)/include/libmule/extras/mulestl/*.cpp" >> "$CDIR/Makefile"
fi
if test "$BUILDQTSTUFF" = "yes"; then
	printf "\t\t" >> "$CDIR/Makefile"
	if test "$MINGWLINUX" != "no"; then
		echo "cp \"\$(SOURCEDIR)/extras/microcontrollersimulator/release/mulemicrosim.exe\" \"\$(PREFIX)/bin/mulemicrosim.exe\"" >> "$CDIR/Makefile"
	else
		echo "cp \"\$(SOURCEDIR)/extras/microcontrollersimulator/mulemicrosim\" \"\$(PREFIX)/bin/mulemicrosim\"" >> "$CDIR/Makefile"
	fi
fi
printf "\t\t" >> "$CDIR/Makefile"
echo "cp \"\$(SOURCEDIR)/src/mule.h\" \"\$(PREFIX)/include/libmule/mule.h\"" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "-rm -r -f \"\$(PREFIX)/include/libmule/\$(SOURCEDIR)\"" >> "$CDIR/Makefile"
echo "" >> "$CDIR/Makefile"
MAKEFLAGSQT=""
if test "$MINGWLINUX" != "no"; then
	MAKEFLAGSQT="-f Makefile.Release"
fi
echo "qtmicrocontrollersim:" >> "$CDIR/Makefile"
printf "\t\t" >> "$CDIR/Makefile"
echo "sh -c \"cd \\\"\$(SOURCEDIR)/extras/microcontrollersimulator\\\" && $HOSTQMAKE -r && \$(MAKE) $MAKEFLAGSQT all\"" >> "$CDIR/Makefile"
echo "" >> "$CDIR/Makefile"
echo "done!"
printf "Creating $CDIR/installheaders.sh... "
echo '#!/bin/sh' > "$CDIR/installheaders.sh"
echo "# Automatically generated by libMule configure script on $CURRENTDATE" >> "$CDIR/installheaders.sh"
echo "if test -e \"\$PREFIX/include/libmule\"; then rm -r -f \"\$PREFIX/include/libmule\"; fi" >> "$CDIR/installheaders.sh"
echo "ALLFILES=\"$FINALHEADERS\"" >> "$CDIR/installheaders.sh"
echo "for File in \$ALLFILES; do" >> "$CDIR/installheaders.sh" >> "$CDIR/installheaders.sh"
echo "   RealFile=\`echo \"\$File\" | sed \"s+\$SOURCEDIR/src/++g\"\`" >> "$CDIR/installheaders.sh"
echo "   RealBaseDir=\`dirname \"\$RealFile\"\`" >> "$CDIR/installheaders.sh"
echo "   if test ! -e \"\$PREFIX/include/libmule/\$RealBaseDir\"; then" >> "$CDIR/installheaders.sh"
echo "          mkdir -p \"\$PREFIX/include/libmule/\$RealBaseDir\"" >> "$CDIR/installheaders.sh"
echo "   fi"  >> "$CDIR/installheaders.sh"
echo "   cp \"\$File\" \"\$PREFIX/include/libmule/\$RealFile\"" >> "$CDIR/installheaders.sh"
echo "done" >> "$CDIR/installheaders.sh"
echo "exit 0" >> "$CDIR/installheaders.sh"
chmod 777 "$CDIR/installheaders.sh"
echo "done!"
echo ""
echo "Finished! Now run \"make\"."
exit 0
