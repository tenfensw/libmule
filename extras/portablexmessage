#!/bin/sh
# portablexmessage
# xmessage-like tool for non-X11 platforms (Windows, Mac, BeOS/Haiku etc)
# Copyright (c) Tim K 2018. Licensed under BSD License.

debugecho() {
	if test "$DEBUG" != "" && test "$DEBUG" != "0" && test "$DEBUG" != "no" && test "$DEBUG" != "false"; then
		echo "[DEBUG] $*"
	fi
}

optionstoechoscript() {
	echo '#!/bin/sh'
	echo "# Automatically generated by $0 (portablexmessage $TOOLVERSION) on $LAUNCHDATE"
	SOMEBUTTONSWITHSLASH=""
	NEWBUTTONS=`echo "$BUTTONS" | sed 's/,/ /g'`
	for ButtonNameTemp in $NEWBUTTONS; do
		if test "$SOMEBUTTONSWITHSLASH" = ""; then
			SOMEBUTTONSWITHSLASH=`echo "$ButtonNameTemp" | cut -d ':' -f1`
		else
			SOMEBUTTONSWITHSLASH="$SOMEBUTTONSWITHSLASH/`echo "$ButtonNameTemp" | cut -d ':' -f1`"
		fi
	done
	echo "echo \"$TEXT [$SOMEBUTTONSWITHSLASH]\""
	echo "printf \"You choose: \""
	echo "read line"
	echo "if test \"\$line\" = \"\"; then"
	echo "   echo \"0\" > /tmp/finalexit.pxmessage"
	echo "   exit 0"
	for Button in $NEWBUTTONS; do
		ButtonName=`echo "$Button" | cut -d ':' -f1`
		ButtonErr=`echo "$Button" | cut -d ':' -f2`
		echo "elif test \"\$line\" = \"$ButtonName\"; then"
		echo "   echo \"$ButtonErr\" > /tmp/finalexit.pxmessage"
		echo "   exit $ButtonErr"
	done
	echo "else"
	echo "   echo \"0\" > /tmp/finalexit.pxmessage"
	echo "   exit 0"
	echo "fi"
	echo "exit 1"
}

TOOLVERSION="0.4"
LAUNCHDATE=`date +"%d.%m.%Y %H:%M:%S"`
BUTTONS="okay:0"
TEXT=""

debugecho "This is $0 $TOOLVERSION"
debugecho "begin debug log on $LAUNCHDATE"
debugecho "uname is `uname`"
debugecho "uname -m is `uname -m`"
debugecho "\$PWD is $PWD"
NEEDTOSAVETOVAR=no
# first parse command-line args
for Arg in $*; do
	if test "$NEEDTOSAVETOVAR" = "no"; then
		if test "$Arg" = "-center"; then
			# ignore -center
			debugecho "ignored -center"
		elif test "$Arg" = "-buttons"; then
			# now this is important
			# set $NEEDTOSAVETOVAR to "buttons" so that the next argument would be saved to $BUTTONS
			NEEDTOSAVETOVAR="buttons"
		elif test "$Arg" = "-file"; then
			# set $NEEDTOSAVETOVAR to "file" so that the file specified in the next argument would be copied over to $TEXT
			NEEDTOSAVETOVAR="file"
		else
			# treat everything else as text
			if test "$TEXT" = ""; then
				TEXT="$Arg"
			else
				TEXT="$TEXT $Arg"
			fi
		fi
	else
		# check the value of $NEEDTOSAVETOVAR
		if test "$NEEDTOSAVETOVAR" = "buttons"; then
			# modify $BUTTONS
			BUTTONS="$Arg"
		elif test "$NEEDTOSAVETOVAR" = "file"; then
			# modify $TEXT
			TEXT=`cat "$Arg"`
		else
			debugecho "An unknown mysterious value of \$NEEDTOSAVETOVAR confused xmessage, ignoring everything"
		fi
		# erase this variable in the end
		NEEDTOSAVETOVAR=no
	fi
done

rm -r -f /tmp/finalexit.pxmessage

TERMINALEMU=xdg-terminal
TMPFILE_SCRIPT="/tmp/$RANDOM-portablexmessage.sh"
optionstoechoscript > $TMPFILE_SCRIPT
chmod 777 $TMPFILE_SCRIPT
# now find a terminal to display the message
if test `uname` = "Darwin"; then
	# Mac OS X specific stuff
	TERMINALEMU=open
elif test `uname` = "Haiku" || test `uname` = "BeOS"; then
	# BeOS has its terminal located in /boot/system/apps/Terminal
	TERMINALEMU="/boot/system/apps/Terminal -e"
elif command -v gnome-terminal > /dev/null 2>&1; then
	TERMINALEMU="gnome-terminal -e"
elif command -v konsole > /dev/null 2>&1; then
	TERMINALEMU="konsole -e"
elif command -v sakura > /dev/null 2>&1; then
	TERMINALEMU="sakura -e"
elif command -v xfce4-terminal > /dev/null 2>&1; then
	TERMINALEMU="xfce4-terminal -e"
elif command -v lxterminal > /dev/null 2>&1; then
	TERMINALEMU="lxterminal -e"
elif command -v xdg-terminal > /dev/null 2>&1; then
	TERMINALEMU="xdg-terminal"
elif command -v qterminal > /dev/null 2>&1; then
	TERMINALEMU="qterminal -e"
elif command -v uxterm > /dev/null 2>&1; then
	TERMINALEMU="uxterm -e"
elif command -v xterm > /dev/null 2>&1; then
	TERMINALEMU="xterm -e"
elif command -v rxvt > /dev/null 2>&1; then
	TERMINALEMU="rxvt -e"
elif command -v xvt > /dev/null 2>&1; then
	TERMINALEMU="xvt -e"
else
	TERMINALEMU="bash"
fi

debugecho "start terminal $TERMINALEMU $TMPFILE_SCRIPT"
$TERMINALEMU $TMPFILE_SCRIPT
rm -r -f $TMPFILE_SCRIPT
while test ! -e "/tmp/finalexit.pxmessage"; do
	sleep 1
	debugecho "still waiting for the user input"
done
TOEXIT=`cat /tmp/finalexit.pxmessage`
debugecho "exiting with error code $TOEXIT"
exit $TOEXIT