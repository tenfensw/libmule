#!/bin/bash
# libMule Porting Assistant

PLATFORMNAME=
PLATFORMDEFINE=

echo "Welcome to libMule Porting Assistant! What would you like to do?"
echo "[1] Create a new platform from scratch"
echo "[2] Create a new platform basing on an existing one"
echo "[3] Load and modify an existing platform"
echo "[4] Exit"
printf "Enter your choice (1-4): "
read userinput_tmp
SELECTEDACTIONID=$userinput_tmp
if test "$SELECTEDACTIONID" = "1" || test "$SELECTEDACTIONID" = "2"; then
	printf "How will your platform be called? "
	read PLATFORMNAME
	printf "How will libMule internally identify your platform? (aka enter the name of the platform in upper-case letters, e.g. ARDUINO) "
	read PLATFORMDEFINE
	PLATFORMDEFINE=`echo "$PLATFORMDEFINE" | sed 's/MULE_PLATFORM_//g'`
	if test "$PLATFORMNAME" = "" || test "$PLATFORMDEFINE" = ""; then
		echo "Nothing was specified, exiting"
		exit 2
	fi
	printf "Performing several tests, this might take a while..."
	for ConfigFileCreateMule in `find ./src -type f -name "vars.mcfg"`; do
		if cat "$ConfigFileCreateMule" | grep -q "PlatformID:$PLATFORMDEFINE"; then
			echo ". failed!"
			echo "[ERROR] A platform with identifier $PLATFORMDEFINE already exists."
			exit 3
		else
			printf '.'
		fi
	done
	if test ! -e "./src/platformsupport/$PLATFORMNAME/vars.mcfg"; then
		echo ". done!"
	else
		echo ". failed!"
		echo "[ERROR] A platform with the name \"$PLATFORMNAME\" already exists."
		exit 4
	fi
	if test "$SELECTEDACTIONID" = "2"; then
		printf "Basing on which platform you would like to create your own (legoev3, pigpio_rpi or dummy)? {default: dummy} "
		read FORKEDPLATFORM
		if test "$FORKEDPLATFORM" = ""; then
			FORKEDPLATFORM=dummy
		fi
		if test ! -e "./src/platformsupport/$FORKEDPLATFORM/vars.mcfg"; then
			echo "[ERROR] Platform $FORKEDPLATFORM is not available in this release of libMule."
			exit 5
		fi
		printf "Importing changes, this may take a while... "
		mkdir -p ./src/platformsupport/$PLATFORMNAME
		cp ./src/platformsupport/$FORKEDPLATFORM/vars.mcfg ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		mv ./src/platformsupport/$PLATFORMNAME/vars.mcfg ./src/platformsupport/$PLATFORMNAME/vars.mcfg.old
		sed 's/PlatformID:/BeforeImportPlatformID:/g' ./src/platformsupport/$PLATFORMNAME/vars.mcfg.old | sed 's/Sources:/BeforeImportSources:/g' | sed 's/Headers:/BeforeImportHeaders:/g' | sed 's/AdditionalCompilerFlags:/BeforeImportCFlags:/g' > ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		rm -r -f ./src/platformsupport/$PLATFORMNAME/vars.mcfg.old
		echo "PlatformID:$PLATFORMDEFINE" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "done!"
	else
		mkdir -p ./src/platformsupport/$PLATFORMNAME
		printf "Which OS does your target device use (linux, qnx, bsd, unix or posix)? {default: posix} "
		read tmp_deviceos
		if test "$tmp_deviceos" = "linux" || test "$tmp_deviceos" = "Linux"; then
			tmp_deviceos=Linux
		elif test "$tmp_deviceos" = "qnx" || test "$tmp_deviceos" = "QNX"; then
			tmp_deviceos=QNX
		elif test "$tmp_deviceos" = "bsd" || test "$tmp_deviceos" = "unix" || test "$tmp_deviceos" = "BSD" || test "$tmp_deviceos" = "UNIX"; then
			tmp_deviceos=UNIX
		else
			tmp_deviceos=POSIX
		fi
		printf "If your target platform has any GPIO pins or device pins, what is their type in C++? Is it \"unsigned\" or \"int\"? {default: unsigned} "
		read tmp_devicepin
		if test "$tmp_devicepin" = "" || test "tmp_devicepin" != "int"; then
			tmp_devicepin=unsigned
		fi
		tmp_devicestring=stdstring
		tmp_devicestopcode=-789
		printf "Does this device have any terminal output? Type \"yes\" or \"no\". {default: no} "
		read tmp_devicehascout
		if test "$tmp_devicehascout" = "yes" || test "$tmp_devicehascout" = "Y" || test "$tmp_devicehascout" = "y" || test "$tmp_devicehascout" = "YES"; then
			tmp_devicehascout=yes
		else
			tmp_devicehascout=no
		fi
		printf "Does this platform depend on any third-party libraries that have to be downloaded from the internet? Type \"yes\" or \"no\". {default: no} "
		read tmp_devicethirdpartydl
		if test "$tmp_devicethirdpartydl" = "yes" || test "$tmp_thirdpartydl" = "Y" || test "$tmp_thirdpartydl" = "y" || test "$tmp_thirdpartydl" = "YES"; then
			tmp_devicehascout=yes
		else
			tmp_devicehascout=no
		fi
		printf "Saving all changes... "
		echo "# Automatically generated by libMule Porting Assistant on `date +"%d.%m.%Y %H:%M:%S"`" > ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "OS:$tmp_deviceos" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "PlatformID:$PLATFORMDEFINE" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "HardwarePinType:$tmp_devicepin" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "StringType:$tmp_devicestring" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "MotorStopCode:$tmp_devicestopcode" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "HasCout:$tmp_devicehascout" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "Required3rdPartyDownloads:$tmp_devicethirdpartydl" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
		echo "done!"
	fi
	printf "Any additional compiler flags needed? If yes, type them here. "
	read tmp_deviceflags
	echo "AdditionalCompilerFlags:" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
	tmp_deviceclassname="Mule $PLATFORMNAME Platform"
	tmp_deviceclassname=`echo "$tmp_deviceclassname" | sed 's/ //g'`
	printf "Are you okay with the class name $tmp_deviceclassname? {default: yes} "
	read tmp_userinput_onq
	if test "$tmp_userinput_onq" = "yes" || test "$tmp_userinput_onq" = "Y" || test "$tmp_userinput_onq" = "y" || test "$tmp_userinput_onq" = "YES" || test "$tmp_userinput_onq" = ""; then
		tmp_userinput_onq=yes
	else
		tmp_userinput_onq=no
	fi
	if test "$tmp_userinput_onq" = "no"; then
		printf "What's the new name, then? "
		read tmp_deviceclassname
		if test "$tmp_deviceclassname" = ""; then
			tmp_deviceclassname=Mule$PLATFORMNAMEPlatform
			echo "Nothing was entered, using Mule$PLATFORMNAMEPlatform name"
		fi
	fi
	echo "#ifndef PORTINGASSISTANT_CLASSHEADER_$PLATFORMDEFINE" > ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#define PORTINGASSISTANT_CLASSHEADER_$PLATFORMDEFINE" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#include \"platformsupport/common/mulecommonplatform.h\"" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#include \"core/muleconfig.h\"" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#include <iostream>" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#include <fstream>" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#include <cstdlib>" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#include <sstream>" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#define MULE_HOMEDIRECTORY \"if your device has a directory where user data can be stored, specify it here\"" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#define MULE_DOCUMENTSDIRECTORY \"if your device has a directory where user data can be stored, specify it here\"" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#define MULE_TEMPDIRECTORY \"/tmp\"" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#define MULE_INPUT 0" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#define MULE_OUTPUT 1" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "class $tmp_deviceclassname : public MuleCommonPlatform {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "    public:" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      $tmp_deviceclassname();" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      MULE_OTHER_STRINGTYPE getPlatformName() { return "$PLATFORMNAME"; }" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "# ifdef MULE_FEATURES_SENSORS" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      std::vector<MuleDevice*> getDevices();" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      MULE_OTHER_HWPINTYPE getPinMode(MULE_OTHER_HWPINTYPE pin);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      bool setPinMode(MULE_OTHER_HWPINTYPE pin, MULE_OTHER_HWPINTYPE mode);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      MULE_OTHER_HWPINTYPE readFromPin(MULE_OTHER_HWPINTYPE pin);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      bool writeToPin(MULE_OTHER_HWPINTYPE pin, MULE_OTHER_HWPINTYPE ct);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      bool setPullUpDown(MULE_OTHER_HWPINTYPE pin, MULE_OTHER_HWPINTYPE val);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "# endif" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "# ifdef MULE_FEATURES_FILEIO" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      MULE_OTHER_STRINGTYPE readFromFile(MULE_OTHER_STRINGTYPE file);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      bool writeToFile(MULE_OTHER_STRINGTYPE file, MULE_OTHER_STRINGTYPE contents);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      bool fileExists(MULE_OTHER_STRINGTYPE file);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      bool deleteFile(MULE_OTHER_STRINGTYPE file);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "# endif" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "# ifdef MULE_FEATURES_SOUND" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      void doBeep();" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      bool playWaveFile(MULE_OTHER_STRINGTYPE filename);" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      MULE_OTHER_STRINGTYPE getSoundBackend() { return \"dynamic\"; }" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "      bool stopAllSounds();" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "# endif" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "};" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "#endif"  >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h
	echo "$tmp_deviceclassname::$tmp_deviceclassname() {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "      // TODO: implement device initialization code here" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "std::vector<MuleDevice*> $tmp_deviceclassname::getDevices() {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     std::vector<MuleDevice*> list_of_connected_devices;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     list_of_connected_devices.clear();" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     int maxpincount = 54; // replace this with the total amount of GPIO/device pins available on your device" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     for (int i = 0; i < maxpincount; i++)" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "          list_of_connected_devices.push_back(new MuleDevice(i));" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     return list_of_connected_devices;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "MULE_OTHER_HWPINTYPE $tmp_deviceclassname::getPinMode(MULE_OTHER_HWPINTYPE pin) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     // TODO: implement this function." >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     // the only thing it does is checking if the specified pin is an input or an output pin and returning either MULE_INPUT or MULE_OUTPUT" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "bool $tmp_deviceclassname::setPinMode(MULE_OTHER_HWPINTYPE pin, MULE_OTHER_HWPINTYPE mode) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     // TODO: implement this function."  >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     // the only thing it does is initializing the specified pin either as an input or an output pin (if everything is okay, then true is returned, if not, then false is returned)" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     return false;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "MULE_OTHER_HWPINTYPE $tmp_deviceclassname::readFromPin(MULE_OTHER_HWPINTYPE pin) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // TODO: implement this function." >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // it gets a value from the sensor connected to the specified pin and returns that value" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    return -1;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "bool $tmp_deviceclassname::writeToPin(MULE_OTHER_HWPINTYPE pin, MULE_OTHER_HWPINTYPE ct) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // TODO: implement this function." >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // it tries to write \"ct\" to the specified pin" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    return false;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "bool $tmp_deviceclassname::setPullUpDown(MULE_OTHER_HWPINTYPE pin, MULE_OTHER_HWPINTYPE val) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // TODO: implement this function IF your target device actually supports pull-up-down resistors." >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "#ifdef MULE_FEATURES_FILEIO" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "MULE_OTHER_STRINGTYPE $tmp_deviceclassname::readFromFile(MULE_OTHER_STRINGTYPE file) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    std::ifstream filereader(file.c_str());" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    if (filereader.is_open() == false)" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "         return MULE_OTHER_STRINGTYPE(\"\");" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    MULE_OTHER_STRINGTYPE result = \"\";" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    MULE_OTHER_STRINGTYPE line;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    while (getline(filereader, line)) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "         if (result == \"\")" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "                result = line;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "         else" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "                result = result + \"\\n\" + line;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    }" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    filereader.close();" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    return result;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "bool $tmp_deviceclassname::writeToFile(MULE_OTHER_STRINGTYPE file, MULE_OTHER_STRINGTYPE contents) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    std::ofstream outwriter(file.c_str());" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    if (outwriter.is_open() == false)" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "        return false;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    else" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "        outwriter << contents;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    outwriter.close();" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    return true;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "bool $tmp_deviceclassname::fileExists(MULE_OTHER_STRINGTYPE file) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "     return (bool)(std::ifstream(file.c_str()));" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "bool $tmp_deviceclassname::deleteFile(MULE_OTHER_STRINGTYPE file) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "#  ifdef MULE_OS_UNIX" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    MULE_OTHER_STRINGTYPE cmd = \"rm -r -f \" + file;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    if (std::system(cmd.c_str()))" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "       return true;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    return false;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "#  else" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    return false;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "#  endif"  >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "#endif" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "#ifdef MULE_FEATURES_SOUND" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "void $tmp_deviceclassname::doBeep() {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // TODO: implement this function." >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // all it does is just beeping though the built-in PC speaker" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "bool $tmp_deviceclassname::playWaveFile(MULE_OTHER_STRINGTYPE filename) {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // TODO: implement this function." >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // all it does it just playing a PCM sample though the built-in PC speaker" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    return false;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "bool $tmp_deviceclassname::stopAllSounds() {" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // TODO: implement this function." >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    // it just turns off the built-in PC speaker and that's it" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "    return false;" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "}" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "#endif" >> ./src/platformsupport/$PLATFORMNAME/$tmp_deviceclassname.cpp
	echo "Sources:$tmp_deviceclassname.cpp" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
	echo "Headers:$tmp_deviceclassname.h" >> ./src/platformsupport/$PLATFORMNAME/vars.mcfg
	mv ./src/platformsupport/common/mulecurrentplatform.h ./src/platformsupport/common/mulecurrentplatform.h.old
	cat ./src/platformsupport/common/mulecurrentplatform.h.old | sed "13i\#define MULE_INTERNAL_CURRENTPLATFORMNAME MULE_OTHER_STRINGTYPE(\"$PLATFORMNAME\")" | sed "13i\#define MULE_INTERNAL_CURRENTPLATFORMCLASS $tmp_deviceclassname" | sed "13i\#include \"platformsupport/$PLATFORMNAME/$tmp_deviceclassname.h\"" | sed "13i\#elif defined(MULE_PLATFORM_$PLATFORMDEFINE)" > ./src/platformsupport/common/mulecurrentplatform.h
	rm -r -f ./src/platformsupport/common/mulecurrentplatform.h.old
	echo "Platform creation finished, now you can reconfigure it to your needs"
	echo ""
fi

