# Jamfile to build libMule

actions GenerateMuleConfig {
	sh -c "CC=\"$(MULETOOLC++) -c\" CXX=\"$(MULETOOLC++) -c\" CFLAGS=\"$(MULETOOLC++FLAGS)\" CXXFLAGS=\"$(MULETOOLC++FLAGS)\" LD=\"$(MULETOOLC++)\" LDFLAGS=\"$(MULETOOLLINKFLAGS)\" ./bootstrap-muletool.sh"
	./generate-muleconfig.sh --output="$(1)" $(MULETOOLC++FLAGS)
}


MULEVERSIONMAJOR = 1 ;
MULEVERSIONMINOR = 0 ;
MULEVERSIONUPDATE = 0 ;

# Display beautiful header
echo "====================================================================" ;
echo "| libMule - Microcontroller-universal library (that is Extendable) |" ;
echo "|           Written by Tim K (timprogrammer@rambler.ru)            |" ;
echo "|                Licensed under GNU LGPLv2.1.                      |" ;
echo "====================================================================" ;
echo "" ;

if $(MULETARGET) {
	echo "MULETARGET is defined, can continue" ;
}
else {
	echo "MULETARGET is not defined, cannot continue" ;
	echo "" ;
	echo "[ERROR] You need to set the MULETARGET variable first to build libMule for a specific platform." ;
	echo "Currently supported platforms are: dummy, legoev3, rpi" ;
	return 1 ; 
}

ENABLE_DEVICES ?= yes ;
ENABLE_FILEIO ?= yes ;
ENABLE_ADDITIONALDEVICES ?= yes ;
ENABLE_SOUND ?= yes ;

if $(CXX) {
	C++ = $(CXX) ;
}

if $(MINIMAL) {
	ENABLE_DEVICES = yes ;
	ENABLE_FILEIO = no ;
	ENABLE_ADDITIONALDEVICES = no ;
	ENABLE_SOUND = no ;
}

include src/platformsupport/$(MULETARGET)/vars.jam ;
if $(ENABLE_FILEIO) = yes {
	include src/fileio/module.jam ;
}

if $(ENABLE_SOUND) = yes {
	include src/sound/module.jam ;
}

if $(ENABLE_ADDITIONALDEVICES) = yes {
	include src/additionaldevices/module.jam ;
}

echo "Target platform operating system: $(MULETARGETOS)" ;
C++FLAGS += -Isrc ;
C++FLAGS += -DMULE_VERSION_MAJOR=$(MULEVERSIONMAJOR) -DMULE_VERSION_MINOR=$(MULEVERSIONMINOR) -DMULE_VERSION_UPDATE=$(MULEVERSIONUPDATE) ; 
if $(DEBUG) || $(MULERELEASE) = no {
	C++FLAGS += -DMULE_FEATURES_DEBUG -DMULE_VERSION_NIGHTLY -g ;
}
else {
	C++FLAGS += -DMULE_VERSION_RELEASE ;
}

if $(MULECOMPILERFLAGS) {
	C++FLAGS += $(MULECOMPILERFLAGS) ;
	CCFLAGS += $(MULECOMPILERFLAGS) ;
}

C++FLAGS += -DMULE_OTHER_GENERICTYPE=-768 ;

if $(MULEBROKENPLATFORM) {
	echo "ERROR!!! Support for platform $(MULETARGET) is currently broken and will be restored in a future libMule release." ;
	if $(STILLBUILDBROKENPLATFORMS) {
		echo "Continuing anyway as specified by the user" ;
	}
	else {
		return 2 ;
	}
}

MULETOOLC++ = $(C++) ;
MULETOOLLINKFLAGS = $(LINKFLAGS) ;
MULETOOLC++FLAGS = $(C++FLAGS) ;
C++ = ./muletool.bootstrapstuff/muletool -compile ;
C++FLAGS += -config muletool.bootstrapstuff/MuleTool.mcfg ;
if $(NT) {
	C++ = muletool.bootstrapstuff\muletool.exe -compile ;
	C++FLAGS += -config muletool.bootstrapstuff\MuleTool.mcfg ;
}
LINK = $(C++) ;
C++FLAGS += -nolibmule -nomuletoolobjectnamingstyle ;

Library libMule : src/core/muleconfig.cpp $(MULEPLATFORMSOURCES) src/core/muleglobalfunctions.cpp src/core/muledevice.cpp src/core/muleapplication.cpp src/platformsupport/common/mulecurrentplatform.cpp $(MULEADDITIONALDEVICESSOURCES) $(MULEFILEIOSOURCES) $(MULESOUNDSOURCES) ;
GenerateMuleConfig src/core/muleconfig.h ;
Depends src/core/muleconfig.cpp : src/core/muleconfig.h ;
